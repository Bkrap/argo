(()=>{var __webpack_modules__={"./src/js/parseExternalNews/parseExternalNews.js":
/*!*******************************************************!*\
  !*** ./src/js/parseExternalNews/parseExternalNews.js ***!
  \*******************************************************/(__unused_webpack_module,__unused_webpack_exports,__webpack_require__)=>{eval("const { Readability } = __webpack_require__(/*! @mozilla/readability */ \"./node_modules/@mozilla/readability/index.js\");\r\n\r\ndocument.addEventListener('DOMContentLoaded', function() {\r\n\r\n\r\n    let finalResults = []\r\n    let category = generic_ajax_object.tags;\r\n    // console.log(category);\r\n\r\n    // Build the URL we are going to request. This will get articles related to Apple and sort them newest first\r\n    let url = 'https://newsapi.org/v2/top-headlines?' +\r\n        'country=us&' +\r\n        category +'&' +\r\n        'sortBy=publishedAt&' +\r\n        'pageSize='+ generic_ajax_object.fetch_daily +'&' +\r\n        'apiKey=' + generic_ajax_object.newsApiKey;\r\n\r\n    // console.log(url);\r\n    if( generic_ajax_object.fetch_news ) {\r\n\r\n    // Make the request with jQuery's ajax() function\r\n    jQuery.ajax({\r\n        url: url,\r\n        method: \"GET\",\r\n    }).then(function(r1) {\r\n        let results = r1.articles;\r\n\r\n        // Create an array of AJAX promises for individual article requests\r\n        let promises = results.map(function(result) {\r\n        return jQuery.ajax({\r\n            url: result.url,\r\n            method: \"GET\"\r\n        }).then(function(r2) {\r\n            // We now have the article HTML, create a jQuery object from it\r\n            let $article = jQuery(r2);\r\n\r\n            // Create a DOM document from the HTML string\r\n            const domParser = new DOMParser();\r\n            const doc = domParser.parseFromString(r2, 'text/html');\r\n\r\n            // Use jQuery to locate the article content\r\n            let articleContent = new Readability(doc).parse();\r\n            let articleContentRaw = articleContent.textContent;\r\n\r\n            finalResults.push({\r\n                description     : result.description,\r\n                publishedAt     : result.publishedAt,\r\n                title           : result.title,\r\n                url             : result.url,\r\n                urlToImage      : result.urlToImage,\r\n                content         : articleContentRaw.replace(/\\n/g, '\\n\\n') + '\\n\\n' + 'SOURCE: ' + '<a href='+ result.url + ' target=\"_blank\">' + result.source.name + '</a>',\r\n            });\r\n\r\n        }).catch(function(error) {\r\n            if (error.status === 403) {\r\n            console.log('Skipped article due to 403 error:', result.url);\r\n            } else {\r\n            console.log('Error fetching article:', error);\r\n            }\r\n            // Return a resolved promise to skip the error and continue with the next article\r\n            return Promise.resolve();\r\n        });\r\n        });\r\n\r\n        // Wait for all promises to resolve\r\n        return Promise.all(promises);\r\n\r\n    }).then(function() {\r\n        console.log(finalResults);\r\n\r\n        var formData = {\r\n        action: 'parse_external_news_api',\r\n        finalResults: finalResults,\r\n        };\r\n\r\n        // Push that bitch to ajax PHP\r\n        jQuery.ajax({\r\n        type: 'POST',\r\n        url: generic_ajax_object.ajax_url,\r\n        data: formData,\r\n        success: function(data) {\r\n            jQuery(document)\r\n            .ajaxStart(function () {\r\n                //ajax request went so show the loading image\r\n                // loadingWheel.show();\r\n            })\r\n            .ajaxStop(function () {\r\n                //got response so hide the loading image\r\n                //    loadingWheel.hide();\r\n            });\r\n        },\r\n        error: function(request, status, error) {\r\n            console.log(request);\r\n            console.log(error);\r\n            alert(status);\r\n        }\r\n        });\r\n\r\n    }).catch(function(error) {\r\n        console.log('Error fetching articles:', error);\r\n    });\r\n\r\n  }\r\n\r\n});\n\n//# sourceURL=webpack://webpack/./src/js/parseExternalNews/parseExternalNews.js?")}},__webpack_module_cache__={},deferred;function __webpack_require__(e){var r=__webpack_module_cache__[e];if(void 0!==r)return r.exports;var n=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e](n,n.exports,__webpack_require__),n.exports}__webpack_require__.m=__webpack_modules__,deferred=[],__webpack_require__.O=(e,r,n,t)=>{if(!r){var a=1/0;for(l=0;l<deferred.length;l++){for(var[r,n,t]=deferred[l],o=!0,_=0;_<r.length;_++)(!1&t||a>=t)&&Object.keys(__webpack_require__.O).every((e=>__webpack_require__.O[e](r[_])))?r.splice(_--,1):(o=!1,t<a&&(a=t));if(o){deferred.splice(l--,1);var s=n();void 0!==s&&(e=s)}}return e}t=t||0;for(var l=deferred.length;l>0&&deferred[l-1][2]>t;l--)deferred[l]=deferred[l-1];deferred[l]=[r,n,t]},__webpack_require__.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),(()=>{var e={parseExternalNews:0};__webpack_require__.O.j=r=>0===e[r];var r=(r,n)=>{var t,a,[o,_,s]=n,l=0;if(o.some((r=>0!==e[r]))){for(t in _)__webpack_require__.o(_,t)&&(__webpack_require__.m[t]=_[t]);if(s)var i=s(__webpack_require__)}for(r&&r(n);l<o.length;l++)a=o[l],__webpack_require__.o(e,a)&&e[a]&&e[a][0](),e[a]=0;return __webpack_require__.O(i)},n=self.webpackChunkwebpack=self.webpackChunkwebpack||[];n.forEach(r.bind(null,0)),n.push=r.bind(null,n.push.bind(n))})();var __webpack_exports__=__webpack_require__.O(void 0,["vendors-node_modules_mozilla_readability_index_js"],(()=>__webpack_require__("./src/js/parseExternalNews/parseExternalNews.js")));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();